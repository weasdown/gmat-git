<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xml:id="Tut_Simulate_and_Estimate_Inter_Spacecraft_DSN_Range_and_Doppler_Data"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Simulate and Estimate Inter-Spacecraft Measurements</title>

  <indexterm>
    <primary>Orbit Determination</primary>
  </indexterm>

  <variablelist>
    <varlistentry>
      <term>Audience</term>

      <listitem>
        <para>Intermediate level</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Length</term>

      <listitem>
        <para>40 minutes</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Prerequisites</term>

      <listitem>
        <para>Basic Mission Design Tutorials</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Script Files</term>

      <listitem>
        <para><filename>Tut_Simulate_Inter_Spacecraft_DSN_Range_and_Doppler_Data.script</filename></para>
      </listitem>
    </varlistentry>
  </variablelist>

  <section>
    <title xml:id="Objective_and_overview_tut">Objective and Overview</title>

    <note>
      <para>GMAT currently implements a number of different data types for
      orbit determination. Please refer to <xref linkend="TrackingDataTypes"/>
      for details on all the measurement types currently supported by GMAT.
      The measurements being considered here are DSN two way range and DSN two
      way Doppler.</para>
    </note>

    <para>In this tutorial, we will use GMAT to generate simulated DSN range
    and Doppler measurement data between two Spacecraft in formation flight.
    One spacecraft, referred to as the measuring Spacecraft, in this formation
    is performing measurements on the other, referred to as the observed
    Spacecraft. Both are in low-Earth orbit with matching parameters, except
    the measuring Spacecraft is on track ahead of the observed Spacecraft.
    These simulated measurements will then be used to perform state estimation
    on the observed Spacecraft.</para>

    <para>The basic steps of this tutorial are:</para>

    <procedure>
      <step>
        <para>Create and configure the spacecraft, spacecraft hardware, and
        related parameters</para>
      </step>

      <step>
        <para>Define the types of measurements to be simulated and the
        associated Error models</para>
      </step>

      <step>
        <para>Create and configure Force model and propagator</para>
      </step>

      <step>
        <para>Create and configure Simulator and BatchEstimator objects</para>
      </step>

      <step>
        <para>Run the mission and analyze the results</para>
      </step>
    </procedure>

    <para>Note that this tutorial, unlike most of the mission design
    tutorials, will be entirely script based. This is because most of the
    resources and commands related to navigation are not implemented in the
    GUI and are only available via the script interface.</para>

    <para>As you go through the tutorial below, it is recommended that you
    paste the script segments into GMAT as you go along. After each paste into
    GMAT, you should perform a syntax check by hitting the Save, Sync button
    (<inlinemediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="11"
                     fileref="files/images/icons/Save_Sync.png" scalefit="1"
                     valign="bottom"/>
        </imageobject>
      </inlinemediaobject>). To avoid syntax errors, where needed, don’t
    forget to add the following command to the last line of the script segment
    you are checking.</para>

    <programlisting>BeginMissionSequence</programlisting>

    <para>We note that in addition to the material presented here, you should
    also look at the individual Help resources for all the objects and
    commands we create and use here. For example,
    <guilabel>Spacecraft</guilabel>, <guilabel>Transponder</guilabel>,
    <guilabel>Transmitter</guilabel>, <guilabel>Receiver</guilabel>,
    <guilabel>ErrorModel</guilabel>, <guilabel>TrackingFileSet</guilabel>,
    <guilabel>RunSimulator</guilabel>, etc all have their own Help
    pages.</para>
  </section>

  <section xml:id="Create_and_configure_the_spacecraft_spacecraft_hardware_and_related_parameters">
    <title>Create and configure the spacecraft, spacecraft hardware, and
    related parameters</title>

    <para>For this tutorial, you will need GMAT open, with a new empty script
    open. To create a new script, click <guibutton>New Script</guibutton>,
    (<inlinemediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="11"
                     fileref="files/images/icons/NewScript.png"
                     valign="bottom" width="1em"/>
        </imageobject>
      </inlinemediaobject>)</para>

    <section>
      <title
      xml:id="Create_the_simulation_satellites_set_their_epoch_and_Cartesian_coordinates">Create
      the simulation satellites, set their epoch and Cartesian
      coordinates</title>

      <para>First, we create a new spacecraft for simulation,
      <guilabel>SimSat</guilabel> and <guilabel>SimMeasureSat</guilabel>, and
      set their epoch and Cartesian coordinates.</para>

      <programlisting>%
%   Simulated Spacecraft
%

Create Spacecraft SimSat;

SimSat.DateFormat          = UTCGregorian;
SimSat.Epoch               = '10 Jun 2010 00:00:00.000';
SimSat.CoordinateSystem    = EarthMJ2000Eq;
SimSat.DisplayStateType    = Cartesian;
SimSat.X                   =   576.86955
SimSat.Y                   = -5701.14276
SimSat.Z                   = -4170.59369
SimSat.VX                  = -1.76450794
SimSat.VY                  =  4.18128798
SimSat.VZ                  = -5.96578986
SimSat.Id                  = 'ObservedSat';

Create Spacecraft SimMeasureSat;

SimMeasureSat.DateFormat          = UTCGregorian;
SimMeasureSat.Epoch               = '10 Jun 2010 00:00:00.000';
SimMeasureSat.CoordinateSystem    = EarthMJ2000Eq;
SimMeasureSat.DisplayStateType    = Cartesian;
SimMeasureSat.X                   =   469.90796
SimMeasureSat.Y                   = -5438.94786
SimMeasureSat.Z                   = -4519.89814	
SimMeasureSat.VX                  = -1.79968026
SimMeasureSat.VY                  =  4.55560101
SimMeasureSat.VZ                  = -5.67378491
SimMeasureSat.Id                  = 'MeasureSat';</programlisting>

      <para>Note that, in addition to setting <guilabel>Sat’s</guilabel>
      coordinates, we also assigned it an ID. This is the label that will be
      written to the GMAT Measurement Data (GMD) file that we will discuss
      later.</para>
    </section>

    <section>
      <title
      xml:id="Create_the_estimation_satellites_set_their_epoch_and_Cartesian_coordinates">Create
      the estimation satellites, set their epoch and Cartesian
      coordinates</title>

      <para>Next, we create new spacecraft for the estimation,
      <guilabel>EstSat</guilabel> and <guilabel>EstMeasureSat</guilabel>, and
      set their epoch and Cartesian coordinates.</para>

      <programlisting>%
%   Estimator Spacecraft
%

Create Spacecraft EstSat;

EstSat.DateFormat          = UTCGregorian;
EstSat.Epoch               = '10 Jun 2010 00:00:00.000';
EstSat.CoordinateSystem    = EarthMJ2000Eq;
EstSat.DisplayStateType    = Cartesian;
EstSat.X                   = 576.87
EstSat.Y                   = -5701.14
EstSat.Z                   = -4170.59
EstSat.VX                  = -1.764508
EstSat.VY                  = 4.181288
EstSat.VZ                  = -5.965790
EstSat.Id                  = 'ObservedSat';
EstSat.AddHardware         = {Transponder1, SpacecraftAntenna};
EstSat.SolveFors           = {CartesianState};    


Create Spacecraft EstMeasureSat;

EstMeasureSat.DateFormat          = UTCGregorian;
EstMeasureSat.Epoch               = '10 Jun 2010 00:00:00.000';
EstMeasureSat.CoordinateSystem    = EarthMJ2000Eq;
EstMeasureSat.DisplayStateType    = Cartesian;
EstMeasureSat.X                   =   469.90796
EstMeasureSat.Y                   = -5438.94786
EstMeasureSat.Z                   = -4519.89814
EstMeasureSat.VX                  = -1.79968026
EstMeasureSat.VY                  =  4.55560101
EstMeasureSat.VZ                  = -5.67378491
EstMeasureSat.Id                  = 'MeasureSat';
EstMeasureSat.NAIFId              = 78;</programlisting>

      <para>Note that in this example we are assuming that the location of the
      MeasurementSat has been determined already, either through estimation
      from GroundStation measurement or otherwise. As such the coordinates for
      the<guilabel> SimMeasureSat </guilabel>and the
      <guilabel>EstMeasureSat</guilabel> the exact same.</para>
    </section>

    <section>
      <title
      xml:id="Create_a_Transponder_object_and_attach_it_to_the_spacecraft">Create
      a Transponder object and attach it to the spacecraft</title>

      <para>To simulate navigation measurements for a given spacecraft, GMAT
      requires that a <guilabel>Transponder</guilabel> object, which receives
      the uplink signal and re-transmits it, be attached to the spacecraft.
      Below, we create the <guilabel>Transponder</guilabel> object and attach
      it to our spacecraft. After we create the
      <guilabel>Transponder</guilabel> object, there are three fields,
      <guilabel>PrimaryAntenna</guilabel>, <guilabel>HardwareDelay</guilabel>,
      and <guilabel>TurnAroundRatio</guilabel> that must be set.</para>

      <programlisting>%
%   Spacecraft hardware
%

Create Antenna SpacecraftAntenna;
Create Transponder HGA;

HGA.PrimaryAntenna  = SpacecraftAntenna;
HGA.HardwareDelay   = 1e-06;
HGA.TurnAroundRatio = '880/749' 


SimSat.AddHardware         = {HGA,SpacecraftAntenna};
EstSat.AddHardware         = {HGA,SpacecraftAntenna};
</programlisting>

      <para>The <guilabel>PrimaryAntenna</guilabel> is the antenna that the
      spacecraft transponder, <guilabel>SatTransponder</guilabel>, uses to
      receive and retransmit RF signals. In the example above, we set this
      field to <guilabel>HGA</guilabel> which is an
      <guilabel>Antenna</guilabel> object we have created. Currently the
      <guilabel>Antenna</guilabel> resource has no function but in a future
      release, it may have a function. <guilabel>HardwareDelay</guilabel>, the
      transponder signal delay in seconds, is set to one micro-second. We set
      <guilabel>TurnAroundRatio</guilabel>, which is the ratio of the
      retransmitted to the input signal, to '880/749.' See the
      <guilabel>FRC-21_RunSimulator </guilabel>Help and <emphasis><xref
      linkend="Appendix_A_Determination_of_Measurement_Noise_Values"
      xrefstyle="select:title"/></emphasis> for a discussion on how GMAT uses
      this input field. As described in the Help, if our DSN data does not use
      a ramp table, this turn around ratio is used directly to calculate the
      Doppler measurements.</para>

      <para>Note that in the last script commands above, we attach our newly
      created <guilabel>Transponder</guilabel> and its related
      <guilabel>Antenna</guilabel> object to each of the observed
      spacecraft.</para>
    </section>

    <section xml:id="Create_a_Receiver_object_and_attach_it_to_the_measurement_spacecraft">
      <title>Create
      a Receiver object and attach it to the measurement spacecraft</title>

      <para>To perform measurements with a given spacecraft, GMAT requires
      that a <guilabel>Transmitter</guilabel> and a
      <guilabel>Receiver</guilabel> object, which send and receive the uplink
      and downlink signals, be attached to the spacecraft. Below, we create
      the objects and attach them to our spacecraft.</para>

      <programlisting><?db-font-size 65% ?>%
%   Measurement Spacecraft hardware
%

Create Transmitter MeasurementTransmitter;
Create Receiver MeasurementReceiver;

MeasurementTransmitter.PrimaryAntenna = SpacecraftAntenna;
MeasurementTransmitter.Frequency      = 7200;
MeasurementReceiver.PrimaryAntenna = SpacecraftAntenna;


SimMeasureSat.AddHardware         = {HGA,SpacecraftAntenna,MeasurementTransmitter, MeasurementReceiver};
EstMeasureSat.AddHardware         = {HGA,SpacecraftAntenna,MeasurementTransmitter, MeasurementReceiver};
</programlisting>

      <para>We set <guilabel>Frequency</guilabel>, which is the frequency of
      the uplink signal, to 7200 MHz.</para>

      <para>Note that in the last script commands above, we attach our newly
      created <guilabel>Transmitter</guilabel> and
      <guilabel>Receiver</guilabel> objects to the spacecraft performing
      measurements.</para>
    </section>
  </section>

  <section xml:id="Define_the_types_of_measurements_to_be_simulated_and_their_associated_Error_models">
    <title>Define the types of measurements to be simulated and their
    associated Error models</title>

    <section>
      <title
      xml:id="Define_the_TrackingFileSets_for_the_simulation_and_the_estimator">Define
      the TrackingFileSets for the simulation and the estimator</title>

      <para>Now we will create and configure a
      <guilabel>TrackingFileSet</guilabel> resource. This resource defines the
      type of data to be simulated, the ground stations that will be used, and
      the file name of the output GMD file which will contain the simulated
      data. In addition, the <guilabel>TrackingFileSet</guilabel> resource
      will define needed simulation parameters for the various data types. A
      parallel <guilabel>TrackingFileSet</guilabel> is created for the
      estimation, with inputs corresponding to the estimated
      Spacecraft.</para>

      <programlisting><?db-font-size 65% ?>%
%   Tracking file sets
%

Create TrackingFileSet simData;

simData.AddTrackingConfig       = {{SimMeasureSat, SimSat, SimMeasureSat}, 'DSN_SeqRange','DSN_TCP'};
simData.FileName                = {'InterSpacecraft_DSN_Range_and_DSN_TCP_Measurement.gmd'};
simData.RampTable               = {};
simData.UseLightTime            = True;
simData.UseRelativityCorrection = True;
simData.UseETminusTAI           = True;
simData.SimRangeModuloConstant  = 33554432;
simData.SimDopplerCountInterval = 10.;  
simData.DataFilters             = {};

Create TrackingFileSet estData;

estData.AddTrackingConfig       = {{EstMeasureSat, EstSat, EstMeasureSat}, 'DSN_SeqRange','DSN_TCP'};
estData.FileName                = {'InterSpacecraft_DSN_Range_and_DSN_TCP_Measurement.gmd'};
estData.RampTable               = {};
estData.UseLightTime            = True;
estData.UseRelativityCorrection = True;
estData.UseETminusTAI           = True;
estData.DataFilters             = {};</programlisting>

      <para>For each <guilabel>TrackingFileSet</guilabel>, the script lines
      are broken into three sections. In the first section, the resource name,
      is declared, the data types are defined, and the output file name is
      specified. <guilabel>AddTrackingConfig</guilabel> is the field that is
      used to define the data types. The
      <guilabel>AddTrackingConfig</guilabel> line tells GMAT to simulate DSN
      Range and Doppler two way measurements for the
      <guilabel>MeasureSat</guilabel> to <guilabel>Sat</guilabel> to
      <guilabel>MeasureSat</guilabel> measurement strand.</para>

      <para>The second section sets some simulation parameters that apply to
      both the range and Doppler measurements. We set
      <guilabel>UseLightTime</guilabel> to True in order to generate realistic
      measurements where GMAT takes into account the finite speed of light.
      The last two parameters in this section,
      <guilabel>UseRelativityCorrection</guilabel> and
      <guilabel>UseETminusTAI</guilabel>, are set to True so that general
      relativistic corrections, as described in Moyer [2000], are applied to
      the light time equations.</para>

      <para>The third section above sets simulation parameters that apply to a
      specific measurement type. <guilabel>SimDopplerCountInterval</guilabel>
      applies only to Doppler measurements and
      <guilabel>SimRangeModuloConstant</guilabel> applies only to range
      measurements. We note that the “Sim” in the field names is used to
      indicate that these fields only are applicable when GMAT is in
      simulation mode (i.e., when using the <guilabel>RunSimulator</guilabel>
      command) data and not when GMAT is in estimation mode (i.e., when using
      the <guilabel>RunEstimator</guilabel> command).
      <guilabel>SimDopplerCountInterval</guilabel>, the Doppler Count
      Interval, is set to 10 seconds and
      <guilabel>SimRangeModuloConstant</guilabel>, the maximum possible range
      value, is set to 33554432. See the <guilabel>RunSimulator</guilabel>
      Help and <emphasis><xref
      linkend="Appendix_A_Determination_of_Measurement_Noise_Value"
      xrefstyle="select:title"/></emphasis> for a description of how these
      parameters are used to calculate the measurement values.</para>
    </section>

    <section  xml:id="Create_Measurement_Error_Models">
      <title>Create Measurement Error
      Models</title>

      <para>It is well known that all measurement types have random noise
      and/or biases associated with them. For inter-spacecraft measurements,
      these affects are modelled using error models on the receiver of the
      measuring Spacecraft. Since we have already created the
      <guilabel>Spacecraft</guilabel> object and its related hardware, we now
      create the receiver error models. Since we wish to simulate both DSN
      Sequential Range and Doppler data, we need to create two error models as
      shown below, one for range measurements and one for Doppler
      measurements.</para>

      <programlisting>%
%   Spacecraft Error models
%

Create ErrorModel DSNRange;

DSNRange.Type           = 'DSN_SeqRange';
DSNRange.NoiseSigma     = 10.63;
DSNRange.Bias           = 0.0;
DSNRange.SolveFors      = {};

Create ErrorModel DSNdoppler;

DSNdoppler.Type       = 'DSN_TCP';
DSNdoppler.NoiseSigma = 0.001;
DSNdoppler.Bias       = 0.0;
DSNdoppler.SolveFors  = {};

MeasurementReceiver.ErrorModels = {DSNRange,DSNdoppler};</programlisting>

      <para>The script segment above is broken into three sections. The first
      section defines an <guilabel>ErrorModel</guilabel> named
      <guilabel>DSNrange</guilabel>. The error model Type is DSN_SeqRange
      which indicates that it is an error model for DSN sequential range
      measurements. The 1 sigma standard deviation of the Gaussian white noise
      is set to 10.63 Range Units (RU) and the measurement bias is set to 0
      RU.</para>

      <para>The second section above defines an
      <guilabel>ErrorModel</guilabel> named <guilabel>DSNdoppler</guilabel>.
      The error model Type is DSN_TCP which indicates that it is an error
      model for DSN total count phase-derived Doppler measurements. The 1
      sigma standard deviation of the Gaussian white noise is set to 1 mHz and
      the measurement bias is set to 0 Hz.</para>

      <para>The third section above attaches the two
      <guilabel>ErrorModel</guilabel> resources we have just created to the
      <guilabel>MeasurementReceiver</guilabel> <guilabel>Receiver</guilabel>.
      Note that with inter-spacecraft measurement, the measurement noise or
      bias is defined on the Receiver hardware. For each measurement conducted
      by a Spacecraft containing that Receiver must have an associated
      ErrorModel. Thus, any range measurement error involving a
      <guilabel>Spacecraft</guilabel> with the
      <guilabel>MeasurementReceiver</guilabel> <guilabel>Receiver</guilabel>
      is defined by the <guilabel>DSNRange</guilabel>
      <guilabel>ErrorModel</guilabel> and any Doppler measurement error
      involving a <guilabel>Spacecraft</guilabel> with the
      <guilabel>MeasurementReceiver</guilabel> <guilabel>Receiver</guilabel>
      is defined by the <guilabel>DSNdoppler</guilabel>
      <guilabel>ErrorModel</guilabel>. Note that since GMAT currently only
      models two way measurements where the transmitting and receiving
      Spacecraft are the same, we do not have to consider the case where the
      transmitting and receiving Spacecraft are different. Suppose we were to
      add an additional <guilabel>Spacecraft</guilabel> to this simulation.
      The measurement error for observations involving this new
      <guilabel>Spacecraft</guilabel> would be defined by the
      <guilabel>ErrorModel</guilabel> resources attached to it's
      <guilabel>Receiver</guilabel>.</para>

      <para>See <xref
      linkend="Appendix_A_Determination_of_Measurement_Noise_Value"
      xrefstyle="select:title"/> for a discussion of how we determined the
      values for NoiseSigma for the two <guilabel>ErrorModel</guilabel>
      resources we created.</para>
    </section>
  </section>

  <section xml:id="Create_and_configure_Force_model_and_Propagator">
    <title>Create and configure Force model and Propagator</title>

    <para>We now create and configure the force model and propagator that will
    be used for the simulation. For this low-Earth orbit constellation, we are
    using simplified force modeling, just accounting for the Earth's
    gravitational effect, and disabling the modeling of solar radiation
    pressure and drag. The script segment accomplishing this is shown
    below.</para>

    <programlisting>%
%   Propagators
%

Create ForceModel ODProp_ForceModel;

ODProp_ForceModel.CentralBody  = Earth;
ODProp_ForceModel.PointMasses  = {Earth};
ODProp_ForceModel.Drag         = None;
ODProp_ForceModel.SRP          = Off;
ODProp_ForceModel.ErrorControl = None;

Create Propagator ODProp;

ODProp.FM                      = ODProp_ForceModel;
ODProp.Type                    = 'RungeKutta56';
ODProp.InitialStepSize         = 60;
ODProp.Accuracy                = 1e-13;
ODProp.MinStep                 = 0;
ODProp.MaxStep                 = 60;
ODProp.MaxStepAttempts         = 50;</programlisting>
  </section>

  <section xml:id="Create_and_configure_Simulator_and_BatchEstimator_Objects">
    <title>Create and configure Simulator and BatchEstimator objects</title>

    <section  xml:id="Create_the_Simulator_Object">
      <title>Create the Simulator
      Object</title>

      <para>As shown below, we create and configure the
      <guilabel>Simulator</guilabel> object used to define our
      simulation.</para>

      <programlisting>%
%   Simulator
%

Create Simulator sim;

sim.AddData                    = {simData};
sim.EpochFormat                = 'UTCGregorian';
sim.InitialEpoch               = '10 Jun 2010 00:00:00.000';
sim.FinalEpoch                 = '12 Jun 2010 00:00:00.000';
sim.MeasurementTimeStep        = 60;
sim.Propagator                 = ODProp;
sim.AddNoise                   = On;</programlisting>

      <para>In the first script line above, we create a
      <guilabel>Simulator</guilabel> object, <guilabel>sim</guilabel>. The
      next field set is <guilabel>AddData</guilabel> which is used to specify
      which <guilabel>TrackingFileSet</guilabel> should be used. Recall that
      the <guilabel>TrackingFileSet</guilabel> specifies the type of data to
      be simulated and the file name specifying where to store the data. The
      <guilabel>TrackingFileSet</guilabel>, <guilabel>simData</guilabel>, that
      we created in the <xref
      linkend="Define_the_types_of_measurements_to_be_simulated_and_their_associated_Error_models"
      xrefstyle="select:title"/> section, specified that we wanted to simulate
      two way DSN range and Doppler data that involved the
      <guilabel>SimMeasureSat</guilabel>
      <guilabel>Spacecraft</guilabel>.</para>

      <para>The next three script lines, which set the
      <guilabel>EpochFormat</guilabel>, <guilabel>InitialEpoch</guilabel>, and
      <guilabel>FinalEpoch</guilabel> fields, specify the time period of the
      simulation. Here, we choose a 2 day duration.</para>

      <para>The next script line sets the
      <guilabel>MeasurementTimeStep</guilabel> field which specifies the
      requested time between measurements. We choose a value of 1
      minute.</para>

      <para>The next script line sets the <guilabel>Propagator</guilabel>
      field which specifies which <guilabel>Propagator</guilabel> object
      should be used. We set this field to the <guilabel>ODProp</guilabel>
      <guilabel>Propagator</guilabel> object which we created in the
      <emphasis><xref
      linkend="Create_and_configure_Force_model_and_Propagator"
      xrefstyle="select:title"/></emphasis> section.</para>

      <para>Finally, in the last line of the script segment, we set the
      <guilabel>AddNoise</guilabel> field which specifies whether or not we
      want to add noise to our simulated measurements. The noise that can be
      added is defined by the <guilabel>ErrorModel</guilabel> objects that we
      created in the <xref linkend="Create_Measurement_Error_Models"
      xrefstyle="select:title"/> section. As discussed in the <xref
      linkend="Create_Measurement_Error_Models" xrefstyle="select:title"/>
      section and <emphasis><xref
      linkend="Appendix_A_Determination_of_Measurement_Noise_Value"
      xrefstyle="select:title"/></emphasis>, the noise added to the range
      measurements would be Gaussian with a one sigma value of 10.63 Range
      Units and the noise added to the Doppler measurements would be Gaussian
      with a one sigma value of 0.001 Hz. For this simulation, we choose to
      add noise.</para>
    </section>

    <section  xml:id="Create_the_BatchEstimator_Object">
      <title>Create the
      BatchEstimator Object</title>

      <para>In order to estimate the true initial state of the observed
      spacecraft, we define the <guilabel>BatchEstimator bat</guilabel> in the
      script below.</para>

      <programlisting><?db-font-size 65% ?>%
%   Estimator
%

Create BatchEstimator bat

bat.ShowProgress               = true;
bat.Measurements               = {estData} 
bat.AbsoluteTol                = 0.000001;
bat.RelativeTol                = 0.001;
bat.MaximumIterations          = 10;
bat.MaxConsecutiveDivergences  = 3;
bat.Propagator                 = ODProp;
bat.ShowAllResiduals           = On;
bat.OLSEInitialRMSSigma        = 3000;
bat.OLSEMultiplicativeConstant = 3;
bat.OLSEAdditiveConstant       = 0;
bat.UseInnerLoopEditing        = True;
bat.ILSEMaximumIterations      = 15;
bat.ILSEMultiplicativeConstant = 3;
bat.InversionAlgorithm         = 'Internal';
bat.EstimationEpochFormat      = 'FromParticipants';
bat.EstimationEpoch            = 'FromParticipants'; 
bat.ReportStyle                = 'Normal';
bat.ReportFile                 = 'InterSpacecraft_DSN_Range_and_DSN_TCP.txt';</programlisting>

      <para>For more information on the parameters involved in defining the
      BatchEstimator object, see the documentation for the <link
      linkend="BatchEstimator">BatchEstimator.</link></para>
    </section>
  </section>

  <section xml:id="Run_the_mission_and_analyze_the_output">
    <title>Run the mission and analyze the output</title>

    <section>
      <title xml:id="Analyze_the_Simulated_Measurements">Analyze the Simulated
      Measurements</title>

      <para>The script segment used to run the mission is shown below.</para>

      <programlisting>BeginMissionSequence
 
RunSimulator sim;
RunEstimator bat;</programlisting>

      <para>The first script line, <guilabel>BeginMissionSequence</guilabel>,
      is a required command which indicates that the “Command” section of the
      GMAT script has begun. The second line of the script issues the
      <guilabel>RunSimulator</guilabel> command with the
      <guilabel>Sim</guilabel> Simulator resource, defined in the <xref
      linkend="Create_the_Simulator_Object" xrefstyle="select:title"/>
      section, as an argument. This tells GMAT to perform the simulation
      specified by the <guilabel>sim</guilabel> resource. The third line of
      the script issues the <guilabel>RunEstimator</guilabel> command with the
      <guilabel>bat</guilabel> Simulator resource, defined in the <xref
      linkend="Create_the_BatchEstimator_Object" xrefstyle="select:title"/>
      section, as an argument.</para>

      <para>We have now completed all of our script segments. See the file,
      <filename>Tut_Simulate_Inter_Spacecraft_DSN_Range_and_Doppler_Data.script</filename>,
      in the GMAT samples folder, for a listing of the entire script. We are
      now ready to run the script. Hit the Save,Sync,Run button,
      (<inlinemediaobject>
          <imageobject>
            <imagedata contentdepth="10"
                       fileref="files/images/icons/Save_Sync_Run.png"
                       valign="bottom"/>
          </imageobject>
        </inlinemediaobject>). Because we are only simulating a small amount
      of data, the script should finish execution in about one second.</para>

      <para>Let’s take a look at the output created. The file created,
      <filename>Tut_Simulate_Inter_Spacecraft_DSN_Range_and_Doppler_Data.gmd</filename>,
      was specified in the <guilabel>TrackingFileSet</guilabel> resource,
      <guilabel>DSNsimData</guilabel>, that we created in the <xref
      linkend="Define_the_types_of_measurements_to_be_simulated_and_their_associated_Error_models"
      xrefstyle="select:title"/> section. The default directory, if none is
      specified, is the GMAT ‘output’ directory. Let’s analyze the contents of
      this “GMAT Measurement Data” or GMD file as shown below.</para>

      <programlisting width="100">% GMAT Internal Measurement Data File

25357.5003935185185185185199    DSN_SeqRange    9003    MeasureSat...
ObservedSat    3.3458274023216171e+06    2    7.200000000000000e+09...
3.355443200000000e+07

25357.5003935185185185185199    DSN_TCP    9005    MeasureSat...
ObservedSat    2    10    -8.4912266453109074e+09

25357.5010879629629629629638    DSN_SeqRange    9003    MeasureSat...
ObservedSat    3.3457330490410877e+06    2    7.200000000000000e+09...
3.355443200000000e+07

25357.5010879629629629629638    DSN_TCP    9005    MeasureSat...
ObservedSat    2    10    -8.4912266436153536e+09
</programlisting>

      <para>The first line of the file is a comment line indicating that this
      is a file containing measurement data stored in GMAT’s internal format.
      There are 4 lines of data representing range data at two successive
      times and Doppler data at two successive times. As we expected, we have
      no more than 4 total measurements. Refer to the <xref
      linkend="TrackingDataTypes"/> Help for a description of the range and
      Doppler GMD file format.</para>

      <para>We now analyze the first line of data which represents a DSN two
      way range measurement at the start of the simulation at '10 Jun 2010
      00:00:00.000 UTCG’ which corresponds to the output TAI modified Julian
      Day of 25357.5003935185185185185199... TAIMJD.</para>

      <para>The second and third fields, DSN_SeqRange and 9003, are just
      internal GMAT codes indicating the use of DSN range (Trk 2-34 type 7)
      data.</para>

      <para>The 4th field, MeasureSat, is the Downlink ID. This is the ID we
      gave the <guilabel>Spacecraft</guilabel>
      <guilabel>SimMeasureSat</guilabel> object. The 5th field, ObservedSat,
      is the spacecraft ID,which is the ID we gave the
      <guilabel>SimSat</guilabel> <guilabel>Spacecraft</guilabel> object that
      we created.</para>

      <para>The 6th field, 3.3458274023216171e+06, is the actual DSN range
      observation value in RU.</para>

      <para>The 7th field, 2, is an integer which represents the Uplink Band
      of the uplink <guilabel>Spacecraft</guilabel>,
      <guilabel>SimMeasureSat</guilabel>. The designation, 2, represents
      X-band. See the <guilabel>RunSimulator</guilabel> Help for a detailed
      discussion of how GMAT determines what value should be written here. As
      described in the Help, since we are not using a ramp table, GMAT
      determines the Uplink Band by looking at the transmit frequency of the
      <guilabel>Transmitter</guilabel> object attached to the
      <guilabel>SimMeasureSat</guilabel> spacecraft. GMAT knows that the 7200
      MHz value that we assigned to <guilabel>SimMeasureSat’s</guilabel>
      <guilabel>Transmitter</guilabel> resource,
      <guilabel>MeasurementTransmitter</guilabel>, corresponds to an X-band
      frequency.</para>

      <para>The 8th field, 7.2e+009, is the transmit frequency of
      <guilabel>SimMeasureSat</guilabel> at the time of the measurement. Since
      we are not using a ramp table, this value will be constant for all
      measurements and it is given by the value of the frequency of the
      <guilabel>Transmitter</guilabel> object,
      <guilabel>MeasurementTransmitter</guilabel>, that we attached to the
      <guilabel>MeasureSat</guilabel> spacecraft. Recall the following script
      segment, <code>DSNTransmitter.Frequency = 7200; %MHz</code>, from the
      <xref
      linkend="Create_a_Receiver_object_and_attach_it_to_the_measurement_spacecraft"
      xrefstyle="select:title"/> section.</para>

      <para>The 9th field, 3.3554432e+07, represents the integer range modulo
      number that helps define the DSN range measurement. This is the value
      that we set when we created and configured the
      <guilabel>TrackingFileSet</guilabel> <guilabel>DSNsimData</guilabel>
      object in the <xref
      linkend="Define_the_types_of_measurements_to_be_simulated_and_their_associated_Error_models"
      xrefstyle="select:title"/> section. Recall the following script
      command,</para>

      <literallayout>                 DSNsimData.SimRangeModuloConstant = 33554432;</literallayout>

      <para>This range modulo number is discussed in <emphasis><xref
      linkend="Appendix_A_Determination_of_Measurement_Noise_Value"
      xrefstyle="select:title"/></emphasis> and is defined as M, the length of
      the ranging code in RU.</para>

      <para>We now analyze the second line of data which represents a DSN two
      way Doppler measurement at the start of the simulation at '10 Jun 2010
      00:00:00.000 UTCG’ which corresponds to the output TAI modified Julian
      Day of 25357.5003935185185185185199... TAIMJD.</para>

      <para>The second and third fields, Doppler and 9005, are just internal
      GMAT codes indicating the use of DSN Doppler (derived from two
      successive Trk 2-34 type 17 Total Count Phase measurements) data.</para>

      <para>The 4th field, MeasureSat, is the Downlink ID. This is the ID we
      gave the <guilabel>Spacecraft</guilabel>
      <guilabel>SimMeasureSat</guilabel> object. The 5th field, ObservedSat,
      is the spacecraft ID,which is the ID we gave the
      <guilabel>SimSat</guilabel> <guilabel>Spacecraft</guilabel> object that
      we created.</para>

      <para>The 6th field, 2, is an integer which represents the Uplink Band
      of the signal from the <guilabel>Spacecraft</guilabel>,
      <guilabel>SimMeasureSat</guilabel>. As we mentioned when discussing the
      range measurement, the designation, 2, represents X-band.</para>

      <para>The 7th field, 10, is the Doppler Count Interval (DCI) used to
      help define the Doppler measurement. This is the value that we set when
      we created and configured the <guilabel>TrackingFileSet</guilabel>
      <guilabel>DSNsimData</guilabel> object in the <xref
      linkend="Define_the_types_of_measurements_to_be_simulated_and_their_associated_Error_models"
      xrefstyle="select:title"/> section. Recall the following script
      command,</para>

      <literallayout>                DSNsimData.SimDopplerCountInterval = 10.0;</literallayout>

      <para>The DCI is also discussed in <emphasis><xref
      linkend="Appendix_A_Determination_of_Measurement_Noise_Value"
      xrefstyle="select:title"/></emphasis>.</para>

      <para>The 8th field, -8.4912266453109074e+09, is the actual DSN Doppler
      observation value in Hz.</para>

      <para>The third line of data represents the second DSN two way range
      measurement at '10 Jun 2010 00:00:01.000 UTCG’ which corresponds to the
      output TAI modified Julian Day time of 25357.5010879629629629629638...
      TAIMJD. The fourth line of data represents the second DSN two way
      Doppler measurement at '10 Jun 2010 00:00:01.000 UTCG.’ All the
      following lines show the simulated measurements at each minute during
      until the end of the simulation, which was defined as '12 Jun 2010
      00:00:00.000.'</para>
    </section>

    <section>
      <title xml:id="Analyze_the_Estimator_Results">Analyse the Estimator
      Results</title>

      <para>Let’s take a look at the output created from the
      <guilabel>BatchEstimator</guilabel>. The file created,
      <filename>Tut_Simulate_Inter_Spacecraft_DSN_Range_and_Doppler_Data.txt</filename>,
      was specified in the <guilabel>TrackingFileSet</guilabel> resource,
      <guilabel>DSNsimData</guilabel>, that we created in the <xref
      linkend="Define_the_types_of_measurements_to_be_simulated_and_their_associated_Error_models"
      xrefstyle="select:title"/> section. The default directory, if none is
      specified, is the GMAT ‘output’ directory. The contents of this file are
      extensive, but can be summarized into three sections.</para>

      <para>The first section is the header, which contains information about
      the initial information that the estimator is provided, as well as
      details about the objects involved in the estimation. A sample of this
      is seen in the text below.</para>

      <para><programlisting><?db-font-size 65% ?>********************  SPACECRAFT INITIAL CONDITIONS  *****************

 Spacecraft State at Beginning of Estimation :

 Spacecraft Name               EstMeasureSat                    EstSat 
 ID                               MeasureSat               ObservedSat 
                                                                       
 Epoch (UTC)        10 Jun 2010 00:00:00.000  10 Jun 2010 00:00:00.000 
 Coordinate System             EarthMJ2000Eq             EarthMJ2000Eq 
 X  (km)                        469.90796000              576.87000000 
 Y  (km)                      -5438.94786000            -5701.14000000 
 Z  (km)                      -4519.89814000            -4170.59000000 
 VX (km/s)                   -1.799680260000           -1.764508000000 
 VY (km/s)                    4.555601010000            4.181288000000 
 VZ (km/s)                   -5.673784910000           -5.965790000000 
 Cr                                 1.800000                  1.800000 
 CrSigma                       Not Estimated             Not Estimated 
 Cd                                 2.200000                  2.200000 
 CdSigma                       Not Estimated             Not Estimated 
 DryMass  (kg)                    850.000000                850.000000 
 DragArea (m^2)                    15.000000                 15.000000 
 SRPArea  (m^2)                     1.000000                  1.000000 </programlisting>The
      second section is the iteration section, which contains a computed
      estimation for each measurement and the resulting residual. At the end
      of each iteration is information on the progress of the batch
      estimation, detailing whether or not the solution is converging and how
      the iteration compares to previous iterations.</para>

      <para>The final section contains the estimated solution, with the
      estimated Cartesian coordinates and the covariance matrix for the
      solution.</para>
    </section>
  </section>

  <section>
    <title>References</title>

    <informaltable colsep="0" frame="none" rowsep="0">
      <tgroup cols="2">
        <colspec colwidth="182*"/>

        <colspec colwidth="818*"/>

        <tbody>
          <row>
            <entry>Mesarch [2007]</entry>

            <entry>M. Mesarch, M. Robertson, N. Ottenstein, A. Nicholson, M.
            Nicholson, D. Ward, J. Cosgrove, D. German, S. Hendry, J. Shaw,
            “Orbit Determination and Navigation of the SOlar TErrestrial
            Relations Observatory (STEREO)”, 20th International Symposium on
            Space Flight Dynamics, Annapolis, MD, September 24-28,
            2007.</entry>
          </row>

          <row>
            <entry>Moyer [2000]</entry>

            <entry>Moyer, Theodore D., Formulation for Observed and Computed
            Values of Deep Space Network Data Types for Navigation (JPL
            Publication 00-7), Jet Propulsion Laboratory, California Institute
            of Technology, October 2000.</entry>
          </row>

          <row>
            <entry>Schanzle [1995]</entry>

            <entry>Schanzle, A., Orbit Determination Error Analysis System
            (ODEAS) Report on Error Sources and Nominal 3-Sigma Uncertainties
            for Covariance Analysis Studies Using ODEAS (Update No. 2),
            Computer Sciences Corporation (CSC) memo delivered as part of NASA
            contract NAS-5-31500, May 31, 1995.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </section>

  <section xml:id="Appendix_A_Determination_of_Measurement_Noise_Value">
    <title>Appendix A – Determination of Measurement Noise Value</title>

    <para>We now say a few words on how we determined the values for
    <guilabel>NoiseSigma</guilabel> for the two
    <guilabel>ErrorModel</guilabel> resources we created. The computed value
    of the DSN range measurement is given by (Moyer [2000]):</para>

    <informalequation>
      <m:math display="block">
        <m:mrow>
          <m:mi>C</m:mi>

          <m:mstyle displaystyle="true">
            <m:mrow>
              <m:munderover>
                <m:mo>∫</m:mo>

                <m:mrow>
                  <m:mi>t</m:mi>

                  <m:mn>1</m:mn>
                </m:mrow>

                <m:mrow>
                  <m:mi>t</m:mi>

                  <m:mn>3</m:mn>
                </m:mrow>
              </m:munderover>

              <m:mrow>
                <m:msub>
                  <m:mi>f</m:mi>

                  <m:mi>T</m:mi>
                </m:msub>

                <m:mo stretchy="false">(</m:mo>

                <m:mi>t</m:mi>

                <m:mo stretchy="false">)</m:mo>

                <m:mi>d</m:mi>

                <m:mi>t</m:mi>
              </m:mrow>
            </m:mrow>
          </m:mstyle>

          <m:mo>,</m:mo>

          <m:mtext> mod M             (RU)</m:mtext>
        </m:mrow>
      </m:math>
    </informalequation>

    <para>where</para>

    <informalequation>
      <m:math display="block">
        <m:msub>
          <m:mi>t</m:mi>

          <m:mn>1</m:mn>
        </m:msub>

        <m:mo>,</m:mo>

        <m:msub>
          <m:mi>t</m:mi>

          <m:mn>3</m:mn>
        </m:msub>

        <m:mo>=</m:mo>

        <m:mtext>Transmission and Reception epoch, respectively</m:mtext>
      </m:math>
    </informalequation>

    <informalequation>
      <m:math display="block">
        <m:msub>
          <m:mi>f</m:mi>

          <m:mi>T</m:mi>
        </m:msub>

        <m:mo>=</m:mo>

        <m:mtext>Ground Station transmit frequency</m:mtext>
      </m:math>
    </informalequation>

    <informalequation>
      <m:math display="block">
        <m:mi>C</m:mi>

        <m:mo>=</m:mo>

        <m:mtext>transmitter dependent constant (221/1498 for X-band and 1/2 for S-Band)</m:mtext>
      </m:math>
    </informalequation>

    <informalequation>
      <m:math display="block">
        <m:mtext>M </m:mtext>

        <m:mo>=</m:mo>

        <m:mtext> length of the ranging code in RU</m:mtext>
      </m:math>
    </informalequation>

    <para>We note that M as defined above is equal to
    <guilabel>SimRangeModuloConstant</guilabel> which was discussed in the
    <emphasis><xref
    linkend="Define_the_types_of_measurements_to_be_simulated_and_their_associated_Error_models"
    xrefstyle="select:title"/></emphasis> section.</para>

    <para>By manipulation of the equation above, we can find a relationship
    between RU and meters, as shown below.</para>

    <informalequation>
      <m:math display="block">
        <m:mrow>
          <m:mi>C</m:mi>

          <m:mfrac>
            <m:mrow>
              <m:mi>d</m:mi>

              <m:mo stretchy="false">(</m:mo>

              <m:mtext>in meters</m:mtext>

              <m:mo stretchy="false">)</m:mo>
            </m:mrow>

            <m:mi>c</m:mi>
          </m:mfrac>

          <m:msub>
            <m:mover accent="true">
              <m:mi>f</m:mi>

              <m:mo>¯</m:mo>
            </m:mover>

            <m:mi>T</m:mi>
          </m:msub>

          <m:mo>=</m:mo>

          <m:mtext> d(in RU)</m:mtext>
        </m:mrow>
      </m:math>
    </informalequation>

    <para>where</para>

    <informalequation>
      <m:math display="block">
        <m:msub>
          <m:mover accent="true">
            <m:mi>f</m:mi>

            <m:mo>¯</m:mo>
          </m:mover>

          <m:mi>T</m:mi>
        </m:msub>

        <m:mo>=</m:mo>

        <m:mtext> </m:mtext>

        <m:mfrac>
          <m:mrow>
            <m:mstyle displaystyle="true">
              <m:mrow>
                <m:munderover>
                  <m:mo>∫</m:mo>

                  <m:mrow>
                    <m:mi>t</m:mi>

                    <m:mn>1</m:mn>
                  </m:mrow>

                  <m:mrow>
                    <m:mi>t</m:mi>

                    <m:mn>3</m:mn>
                  </m:mrow>
                </m:munderover>

                <m:mrow>
                  <m:msub>
                    <m:mi>f</m:mi>

                    <m:mi>T</m:mi>
                  </m:msub>

                  <m:mo stretchy="false">(</m:mo>

                  <m:mi>t</m:mi>

                  <m:mo stretchy="false">)</m:mo>

                  <m:mi>d</m:mi>

                  <m:mi>t</m:mi>
                </m:mrow>
              </m:mrow>
            </m:mstyle>
          </m:mrow>

          <m:mrow>
            <m:mo stretchy="false">(</m:mo>

            <m:mi>t</m:mi>

            <m:mn>3</m:mn>

            <m:mo>−</m:mo>

            <m:mi>t</m:mi>

            <m:mn>1</m:mn>

            <m:mo stretchy="false">)</m:mo>
          </m:mrow>
        </m:mfrac>

        <m:mo>=</m:mo>

        <m:mtext>average transmit frequency (between transmit and receive),</m:mtext>
      </m:math>
    </informalequation>

    <informalequation>
      <m:math display="block">
        <m:mtext>c=speed of light in m/s</m:mtext>
      </m:math>
    </informalequation>

    <informalequation>
      <m:math display="block">
        <m:mtext>d= round trip distance</m:mtext>
      </m:math>
    </informalequation>

    <para>If we assume the round trip distance is 1 meter, we have</para>

    <informalequation>
      <m:math display="block">
        <m:mrow>
          <m:mtext>d(in RU)</m:mtext>

          <m:mo>=</m:mo>

          <m:mi>C</m:mi>

          <m:mfrac>
            <m:mrow>
              <m:msub>
                <m:mover accent="true">
                  <m:mi>f</m:mi>

                  <m:mo>¯</m:mo>
                </m:mover>

                <m:mi>T</m:mi>
              </m:msub>
            </m:mrow>

            <m:mi>c</m:mi>
          </m:mfrac>
        </m:mrow>
      </m:math>
    </informalequation>

    <para>Recall that in the <xref
    linkend="Create_a_Receiver_object_and_attach_it_to_the_measurement_spacecraft"
    xrefstyle="select:title"/> section, we set <code>DSNTransmitter.Frequency
    = 7200</code>; This corresponds to an X-band frequency (so, C=221/1498) of
    7200e6 Hz. For the case where a ramp table is not used, we have a constant
    frequency, <inlineequation>
        <m:math display="inline">
          <m:mrow>
            <m:msub>
              <m:mover accent="true">
                <m:mi>f</m:mi>

                <m:mo>¯</m:mo>
              </m:mover>

              <m:mi>T</m:mi>
            </m:msub>

            <m:mo>=</m:mo>

            <m:msub>
              <m:mi>f</m:mi>

              <m:mi>T</m:mi>
            </m:msub>
          </m:mrow>
        </m:math>
      </inlineequation>, and thus</para>

    <informalequation>
      <m:math display="block">
        <m:mrow>
          <m:mtext>d(in RU)= </m:mtext>

          <m:mfrac>
            <m:mrow>
              <m:mn>221</m:mn>
            </m:mrow>

            <m:mrow>
              <m:mn>1498</m:mn>
            </m:mrow>
          </m:mfrac>

          <m:mfrac>
            <m:mrow>
              <m:mn>7200</m:mn>

              <m:mi>e</m:mi>

              <m:mn>6</m:mn>
            </m:mrow>

            <m:mrow>
              <m:mtext>299792458</m:mtext>
            </m:mrow>
          </m:mfrac>

          <m:mtext>  = 3</m:mtext>

          <m:mtext>.543172 RU</m:mtext>
        </m:mrow>
      </m:math>
    </informalequation>

    <para>For this example, for DSN range measurements, we want to use a 1
    sigma noise bias of 3 meters (Schanzle [1995]). From the calculations
    above, we determine that this corresponds to 3*3.543172 <inlineequation>
        <m:math display="inline">
          <m:mo>≈</m:mo>
        </m:math>
      </inlineequation> 10.63 RU.</para>
  </section>
</chapter>
